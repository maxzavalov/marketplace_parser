import telebot
from telebot import types
import time
import threading
from config import BOT_TOKEN
from parsers import WildberriesParser, OzonParser

bot = telebot.TeleBot(BOT_TOKEN)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

wb_parser = WildberriesParser()
ozon_parser = OzonParser()

class UserState:
    """
    –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    def __init__(self):
        self.waiting_for_query = False
        self.waiting_for_target_price = False
        self.selected_marketplace = None
        self.current_query = None
        self.selected_product = None


def get_user_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Price Tracker Bot!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏ —É–≤–µ–¥–æ–º–ª—é, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —É–ø–∞–¥–µ—Ç –¥–æ –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/track - –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
/my_tracks - –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã
/search - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /track
2. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞gitad
4. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É
5. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!

üïê <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç</i>
    """

    bot.send_message(message.chat.id, welcome_text, parse_mode='HTML')


@bot.message_handler(commands=['track'])
def start_tracking(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn_wb = types.KeyboardButton('üü£ Wildberries')
    btn_ozon = types.KeyboardButton('üîµ Ozon')
    btn_cancel = types.KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞')
    markup.add(btn_wb, btn_ozon, btn_cancel)

    bot.send_message(
        message.chat.id,
        "üéØ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",
        reply_markup=markup,
        parse_mode='HTML'
    )

    state = get_user_state(message.chat.id)
    state.waiting_for_query = True
    state.waiting_for_target_price = False


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.chat.id
    state = get_user_state(user_id)
    text = message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if text == '‚ùå –û—Ç–º–µ–Ω–∞':
        _reset_user_state(user_id)
        bot.send_message(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    # –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    if state.waiting_for_query and not state.selected_marketplace:
        if text in ['üü£ Wildberries', 'üîç Wildberries']:
            state.selected_marketplace = 'wildberries'
            marketplace_name = "Wildberries"
        elif text in ['üîµ Ozon', 'üîç Ozon']:
            state.selected_marketplace = 'ozon'
            marketplace_name = "Ozon"
        else:
            bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–∑ –∫–Ω–æ–ø–æ–∫.")
            return

        bot.send_message(
            user_id,
            f"üîç <b>–ü–æ–∏—Å–∫ –Ω–∞ {marketplace_name}</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode='HTML',
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # –≠—Ç–∞–ø 2: –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if state.waiting_for_query and state.selected_marketplace and not state.current_query:
        state.current_query = text

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
        search_msg = bot.send_message(user_id, "üîç <b>–ò—â–µ–º —Ç–æ–≤–∞—Ä—ã...</b>", parse_mode='HTML')

        thread = threading.Thread(
            target=_search_products,
            args=(user_id, text, state.selected_marketplace, search_msg.message_id)
        )
        thread.start()
        return



    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    elif text.isdigit():
        _handle_delete_track(user_id, int(text))
    else:
        bot.send_message(user_id, "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

def _search_products(user_id, query, marketplace, message_id):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        bot.delete_message(user_id, message_id)

        status_msg = bot.send_message(user_id, f"üîç <b>–ò—â–µ–º '{query}' –Ω–∞ {marketplace}...</b>", parse_mode='HTML')

        # –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = wb_parser if marketplace == 'wildberries' else ozon_parser
        products = parser.parse_search(query, max_products=5)

        if not products:
            bot.edit_message_text(
                f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞ {marketplace} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                user_id,
                status_msg.message_id
            )
            _reset_user_state(user_id)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        response = f"üîç <b>–ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':</b>\n\n"

        for i, product in enumerate(products, 1):
            response += f"<b>{i}. {product['name']}</b>\n"
            response += f"üí∞ <b>–¶–µ–Ω–∞:</b> {product['price']}\n"
            response += f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {product['rating']}\n\n"

        markup = types.InlineKeyboardMarkup()
        for i in range(len(products)):
            markup.add(types.InlineKeyboardButton(f"–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä {i + 1}", callback_data=f"select_{i}"))

        bot.edit_message_text(
            response,
            user_id,
            status_msg.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = get_user_state(user_id)
        state.search_results = products

    except Exception as e:
        bot.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}",
            user_id,
            status_msg.message_id
        )
        _reset_user_state(user_id)


def _handle_delete_track(user_id, track_number):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    pass


def _reset_user_state(user_id):
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_states:
        user_states[user_id] = UserState()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ Price Tracker Bot –∑–∞–ø—É—â–µ–Ω...")

    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)
        main()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ


if __name__ == "__main__":
    main()
